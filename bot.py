import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import json
import os
import requests
import hmac
import hashlib
import time
from datetime import datetime
from urllib.parse import urlencode
from config import TELEGRAM_BOT_TOKEN, USER_DATA_FILE, USER_STATES_FILE, BYBIT_API_URL, BYBIT_API_URL
from security import encrypt_data, decrypt_data

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# File to store user data
DATA_FILE = USER_DATA_FILE
USER_STATES = USER_STATES_FILE

# Load or create user data
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
            # Decrypt API keys when loading
            for user_id in data:
                if 'bybit_api_key' in data[user_id]:
                    data[user_id]['bybit_api_key'] = decrypt_data(data[user_id]['bybit_api_key'])
                if 'bybit_api_secret' in data[user_id]:
                    data[user_id]['bybit_api_secret'] = decrypt_data(data[user_id]['bybit_api_secret'])
            return data
    else:
        return {}

# Save user data
def save_user_data(data):
    # Encrypt API keys before saving
    data_to_save = {}
    for user_id in data:
        data_to_save[user_id] = data[user_id].copy()
        if 'bybit_api_key' in data_to_save[user_id]:
            data_to_save[user_id]['bybit_api_key'] = encrypt_data(data_to_save[user_id]['bybit_api_key'])
        if 'bybit_api_secret' in data_to_save[user_id]:
            data_to_save[user_id]['bybit_api_secret'] = encrypt_data(data_to_save[user_id]['bybit_api_secret'])
    
    with open(DATA_FILE, 'w') as f:
        json.dump(data_to_save, f, indent=2)

# Load or create user states
def load_user_states():
    if os.path.exists(USER_STATES):
        with open(USER_STATES, 'r') as f:
            return json.load(f)
    else:
        return {}

# Save user states
def save_user_states(states):
    with open(USER_STATES, 'w') as f:
        json.dump(states, f, indent=2)

# Bybit API functions
def get_bybit_signature(api_key, api_secret, params, timestamp):
    """Generate signature for Bybit API request"""
    param_str = f"{timestamp}{api_key}{''}{urlencode(sorted(params.items()))}"
    signature = hmac.new(
        bytes(api_secret, "utf-8"),
        bytes(param_str, "utf-8"),
        hashlib.sha256
    ).hexdigest()
    return signature

def get_bybit_signature_v3(api_key, api_secret, method, url, params=None, data=None):
    """Generate signature for Bybit V3 API request"""
    timestamp = str(int(time.time() * 1000))
    
    if params:
        query_string = urlencode(sorted(params.items()))
    else:
        query_string = ""
    
    if data:
        body = json.dumps(data, separators=(",", ":"))
    else:
        body = ""
    
    signature_data = timestamp + api_key + query_string + body
    signature = hmac.new(
        bytes(api_secret, "utf-8"),
        bytes(signature_data, "utf-8"),
        hashlib.sha256
    ).hexdigest()
    
    return signature, timestamp

def get_bybit_wallet_balance(api_key, api_secret):
    """Get wallet balance from Bybit API"""
    return make_bybit_request(api_key, api_secret, "GET", "/v5/account/wallet-balance")

def get_bybit_positions(api_key, api_secret):
    """Get positions from Bybit API"""
    params = {'category': 'linear'}
    return make_bybit_request(api_key, api_secret, "GET", "/v5/position/list", params=params)

def make_bybit_request(api_key, api_secret, method, endpoint, params=None, data=None):
    """Make authenticated request to Bybit API"""
    try:
        url = f"{BYBIT_API_URL}{endpoint}"
        
        # Generate signature
        signature, timestamp = get_bybit_signature_v3(api_key, api_secret, method, url, params, data)
        
        # Prepare headers
        headers = {
            "Content-Type": "application/json",
            "X-BAPI-API-KEY": api_key,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-SIGN": signature
        }
        
        # Make API request
        if method.upper() == "GET":
            response = requests.get(url, params=params, headers=headers)
        elif method.upper() == "POST":
            response = requests.post(url, params=params, json=data, headers=headers)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Bybit API error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        logger.error(f"Error making Bybit request: {e}")
        return None

# Main menu
def main_menu():
    keyboard = [
        [InlineKeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–∞', callback_data='crypto_menu'), InlineKeyboardButton(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', callback_data='piggy_bank_menu')],
        [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# Function to delete user message for privacy
def delete_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int) -> None:
    try:
        import asyncio
        asyncio.create_task(context.bot.delete_message(chat_id=chat_id, message_id=message_id))
    except Exception as e:
        logger.warning(f"Could not delete message: {e}")

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    # Delete user's message for privacy
    # if update.message:
    #     delete_message(context, update.effective_chat.id, update.message.message_id)
    
    # Initialize user data if not exists
    if user_id not in user_data:
        user_data[user_id] = {
            'bybit_api_key': '',
            'bybit_api_secret': '',
            'piggy_banks': {},
            'shopping_list': {
                '–ü—Ä–æ–¥—É–∫—Ç—ã': [],
                '–ê–ø—Ç–µ–∫–∞': [],
                '–û—Å—Ç–∞–ª—å–Ω–æ–µ': []
            }
        }
        save_user_data(user_data)
    else:
        # Ensure shopping list structure exists for existing users
        if 'shopping_list' not in user_data[user_id]:
            user_data[user_id]['shopping_list'] = {
                '–ü—Ä–æ–¥—É–∫—Ç—ã': [],
                '–ê–ø—Ç–µ–∫–∞': [],
                '–û—Å—Ç–∞–ª—å–Ω–æ–µ': []
            }
        else:
            # Ensure all categories exist
            categories = ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ê–ø—Ç–µ–∫–∞', '–û—Å—Ç–∞–ª—å–Ω–æ–µ']
            for category in categories:
                if category not in user_data[user_id]['shopping_list']:
                    user_data[user_id]['shopping_list'][category] = []
        save_user_data(user_data)
    
    if user_id in user_states:
        del user_states[user_id]
        save_user_states(user_states)
    
    # Create a comprehensive menu with all functionality
    keyboard = [
        [InlineKeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–∞', callback_data='crypto_menu'), InlineKeyboardButton(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', callback_data='piggy_bank_menu')],
        [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_menu'), InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç! ü§ñ\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏, '
        '–∫–æ–ø–∏–ª–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:'
    )
    
    # Send the menu with buttons
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup
    )

# Function to show main menu
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Create a comprehensive menu with all functionality
    keyboard = [
        [InlineKeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–∞', callback_data='crypto_menu'), InlineKeyboardButton(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', callback_data='piggy_bank_menu')],
        [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_menu'), InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=reply_markup
    )

# Callback versions of menu functions
async def show_main_menu_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Create a comprehensive menu with all functionality
    keyboard = [
        [InlineKeyboardButton('üí∞ –ö—Ä–∏–ø—Ç–∞', callback_data='crypto_menu'), InlineKeyboardButton(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', callback_data='piggy_bank_menu')],
        [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_menu'), InlineKeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=reply_markup
    )

# Handle all text messages
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return
        
    text = update.message.text
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    # Delete user's message for privacy
    # delete_message(context, update.effective_chat.id, update.message.message_id)
    
    # Handle different states
    if user_id in user_states:
        state = user_states[user_id]
        
        # Handle API key input
        if state == 'WAITING_API_KEY':
            await handle_api_key_input(update, context)
            return
        elif state == 'WAITING_API_SECRET':
            await handle_api_secret_input(update, context)
            return
        # Handle piggy bank creation
        elif state == 'CREATING_PIGGY_NAME':
            await handle_piggy_name_input(update, context)
            return
        elif state.startswith('CREATING_PIGGY_TARGET_'):
            await handle_piggy_target_input(update, context)
            return
        # Handle deposit/withdraw
        elif state.startswith('DEPOSITING_') or state.startswith('WITHDRAWING_'):
            await handle_amount_input(update, context)
            return
        # Handle shopping list item addition
        elif state.startswith('ADDING_ITEM_'):
            await handle_add_shopping_item(update, context)
            return
        # Handle piggy bank editing
        elif state.startswith('EDITING_PIGGY_NAME_'):
            await handle_edit_piggy_name_input(update, context)
            return
        elif state.startswith('EDITING_PIGGY_TARGET_'):
            await handle_edit_piggy_target_input(update, context)
            return
    
    # Clear user state if not in a specific flow
    if user_id in user_states:
        should_clear_state = True
        # Don't clear state for specific flows
        if not text.startswith(('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–ª–∫—É', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'üí∞ –ü–æ–ª–æ–∂–∏—Ç—å', 'üí∏ –°–Ω—è—Ç—å')):
            if text not in ['üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏', '‚ûï –î–æ–±–∞–≤–∏—Ç—å']:
                del user_states[user_id]
                save_user_states(user_states)
    
    # Handle menu selections
    if text == 'üí∞ –ö—Ä–∏–ø—Ç–∞':
        await handle_crypto_menu(update, context)
    elif text in [' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', ' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', ' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞']:  # Handle variations
        await handle_piggy_bank_menu(update, context)
    elif text == 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
        await handle_shopping_list_menu(update, context)
    elif text == 'üè† –ì–ª–∞–≤–Ω–∞—è':
        await start(update, context)  # Make this async call
    elif text.startswith(' –ú–æ—Å '):
        # Handle piggy bank selection
        piggy_name = text[2:].strip()
        await handle_piggy_bank_actions(update, context, piggy_name)
    elif text in ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üí∞ –ë–∞–ª–∞–Ω—Å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']:
        await handle_crypto_submenu(update, context, text)
    elif text in ['üçé –ü—Ä–æ–¥—É–∫—Ç—ã', 'Êù®Ê¨¢–∫–∞', 'üì¶ –û—Å—Ç–∞–ª—å–Ω–æ–µ']:
        await handle_shopping_category(update, context, text)  # Keep emoji for proper matching
    elif text == '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–ª–∫—É':
        await handle_create_piggy_bank(update, context)
    elif text == 'üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏':
        await handle_enter_api_keys(update, context)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
        # This will be handled by state
        pass
    elif text.startswith('‚ùå ') and len(text) > 2:
        # Handle item deletion from shopping list
        item_to_delete = text[2:]  # Remove emoji
        handle_delete_shopping_item(update, context, item_to_delete)
    elif text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å':
        handle_clear_shopping_category(update, context)
    elif text.startswith('üí∞ –ü–æ–ª–æ–∂–∏—Ç—å'):
        # Extract piggy bank name from state or message
        await handle_deposit_to_piggy(update, context)
    elif text.startswith('üí∏ –°–Ω—è—Ç—å'):
        await handle_withdraw_from_piggy(update, context)
    elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        await handle_edit_piggy_bank(update, context)
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å':
        await handle_delete_piggy_bank(update, context)
    elif text.startswith('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'):
        await handle_edit_piggy_name(update, context)
    elif text.startswith('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É'):
        await handle_edit_piggy_target(update, context)
    elif text in [' mos –ö–æ–ø–∏–ª–∫–∞', ' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞', ' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞']:  # Handle all variations
        await handle_piggy_bank_menu(update, context)
    elif text == ' mos –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫' or text == 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':  # Handle both variations
        await handle_shopping_list_menu(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':  # Explicitly handle settings button
        handle_settings_menu(update, context)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await handle_help_menu(update, context)
    else:
        # For any other text, show main menu
        await show_main_menu(update, context)

# Handle settings menu
async def handle_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    keyboard = [
        [InlineKeyboardButton('üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏', callback_data='enter_api_keys')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    api_info = "API –∫–ª—é—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    if user_data.get(user_id, {}).get('bybit_api_key'):
        api_info = f"API Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_data[user_id]['bybit_api_key'][:5]}...{user_data[user_id]['bybit_api_key'][-5:]}"
    
    await update.message.reply_text(
        f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n'
        f'{api_info}\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

# Handle settings menu callback
async def handle_settings_menu_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    keyboard = [
        [InlineKeyboardButton('üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏', callback_data='enter_api_keys')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    api_info = "API –∫–ª—é—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    if user_data.get(user_id, {}).get('bybit_api_key'):
        api_info = f"API Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_data[user_id]['bybit_api_key'][:5]}...{user_data[user_id]['bybit_api_key'][-5:]}"
    
    await query.edit_message_text(
        f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n'
        f'{api_info}\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

# Handle help menu
async def handle_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        '‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n'
        'üí∞ –ö—Ä–∏–ø—Ç–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏ Bybit)\n'
        ' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∫–æ–ø–∏–ª–∫–∞–º–∏\n'
        'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ - –≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n'
        '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á–∏ –æ—Ç Bybit '
        '–≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.'
    )
    
    await update.message.reply_text(
        help_text,
        reply_markup=reply_markup
    )

# Handle help menu callback
async def handle_help_menu_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    help_text = (
        '‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n'
        'üí∞ –ö—Ä–∏–ø—Ç–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏ Bybit)\n'
        ' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∫–æ–ø–∏–ª–∫–∞–º–∏\n'
        'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ - –≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n'
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n'
        '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á–∏ –æ—Ç Bybit '
        '–≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.'
    )
    
    await query.edit_message_text(
        help_text,
        reply_markup=reply_markup
    )

# Handle crypto menu
async def handle_crypto_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    # Check if API keys are set
    if not user_data.get(user_id, {}).get('bybit_api_key') or not user_data.get(user_id, {}).get('bybit_api_secret'):
        keyboard = [
            [InlineKeyboardButton('üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏', callback_data='enter_api_keys')],
            [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ Bybit.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏:',
            reply_markup=reply_markup
        )
        return
    
    # If API keys are set, show crypto menu
    keyboard = [
        [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='crypto_stats'), InlineKeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='crypto_balance')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='crypto_settings'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Fetch data from Bybit API
    try:
        api_key = user_data[user_id]['bybit_api_key']
        api_secret = user_data[user_id]['bybit_api_secret']
        
        # Get positions
        positions_data = get_bybit_positions(api_key, api_secret)
        
        if positions_data and positions_data.get('retCode') == 0:
            positions = positions_data.get('result', {}).get('list', [])
            
            # Format positions for display
            positions_text = ''
            total_pnl = 0
            
            for position in positions:
                if float(position.get('size', 0)) > 0:  # Only show open positions
                    symbol = position.get('symbol', 'Unknown')
                    pnl = float(position.get('unrealisedPnl', 0))
                    roe = float(position.get('roe', 0)) * 100
                    total_pnl += pnl
                    
                    positions_text += f'{symbol}: {roe:+.1f}% ({pnl:+.0f}$)\n'
            
            if not positions_text:
                positions_text = '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n'
                
            await update.message.reply_text(
                f'üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n'
                f'{positions_text}\n'
                f'–û–±—â–∏–π PnL: {total_pnl:+.0f}$\n\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                'üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n'
                '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error fetching Bybit data: {e}")
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Bybit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏.\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=reply_markup
        )

# Handle crypto menu callback
async def handle_crypto_menu_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    # Check if API keys are set
    if not user_data.get(user_id, {}).get('bybit_api_key') or not user_data.get(user_id, {}).get('bybit_api_secret'):
        keyboard = [
            [InlineKeyboardButton('üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏', callback_data='enter_api_keys')],
            [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ Bybit.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏:',
            reply_markup=reply_markup
        )
        return
    
    # If API keys are set, show crypto menu
    keyboard = [
        [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='crypto_stats'), InlineKeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='crypto_balance')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='crypto_settings'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Fetch data from Bybit API
    try:
        api_key = user_data[user_id]['bybit_api_key']
        api_secret = user_data[user_id]['bybit_api_secret']
        
        # Get positions
        positions_data = get_bybit_positions(api_key, api_secret)
        
        if positions_data and positions_data.get('retCode') == 0:
            positions = positions_data.get('result', {}).get('list', [])
            
            # Format positions for display
            positions_text = ''
            total_pnl = 0
            
            for position in positions:
                if float(position.get('size', 0)) > 0:  # Only show open positions
                    symbol = position.get('symbol', 'Unknown')
                    pnl = float(position.get('unrealisedPnl', 0))
                    roe = float(position.get('roe', 0)) * 100
                    total_pnl += pnl
                    
                    positions_text += f'{symbol}: {roe:+.1f}% ({pnl:+.0f}$)\n'
            
            if not positions_text:
                positions_text = '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n'
                
            await query.edit_message_text(
                f'üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n'
                f'{positions_text}\n'
                f'–û–±—â–∏–π PnL: {total_pnl:+.0f}$\n\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                'üìà –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n\n'
                '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error fetching Bybit data: {e}")
        await query.edit_message_text(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Bybit. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏.\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=reply_markup
        )

# Handle crypto submenu
async def handle_crypto_submenu(update: Update, context: ContextTypes.DEFAULT_TYPE, selection: str) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if selection == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        # Statistics submenu
        keyboard = [
            [{'text': 'üìÖ –î–µ–Ω—å'}, {'text': 'üìÜ –ù–µ–¥–µ–ª—è'}],
            [{'text': 'üóì –ú–µ—Å—è—Ü'}, {'text': 'FullYear'}],
            [{'text': 'üè† –ì–ª–∞–≤–Ω–∞—è'}]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', reply_markup=reply_markup)
        
    elif selection == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        # Show balance
        user_id = str(update.effective_user.id)
        user_data = load_user_data()
        
        try:
            api_key = user_data[user_id]['bybit_api_key']
            api_secret = user_data[user_id]['bybit_api_secret']
            
            # Get wallet balance
            balance_data = get_bybit_wallet_balance(api_key, api_secret)
            
            if balance_data and balance_data.get('retCode') == 0:
                balances = balance_data.get('result', {}).get('list', [{}])[0].get('coin', [])
                
                # Format balances for display
                balance_text = ''
                total_balance = 0
                
                for coin in balances:
                    coin_name = coin.get('coin', 'Unknown')
                    coin_balance = float(coin.get('walletBalance', 0))
                    coin_usd_value = float(coin.get('usdValue', 0))
                    total_balance += coin_usd_value
                    
                    if coin_balance > 0:
                        balance_text += f'{coin_name}: {coin_balance:.4f}'
                        if coin_usd_value > 0:
                            balance_text += f' (‚âà ${coin_usd_value:.0f})\n'
                        else:
                            balance_text += '\n'
                
                if not balance_text:
                    balance_text = '–ö–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç\n'
                    
                await update.message.reply_text(
                    f'üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                    f'{balance_text}\n'
                    f'–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ‚âà ${total_balance:.0f}',
                    reply_markup=ReplyKeyboardMarkup([
                        [{'text': 'üè† –ì–ª–∞–≤–Ω–∞—è'}]
                    ], resize_keyboard=True)
                )
            else:
                await update.message.reply_text(
                    'üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                    '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n'
                    '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ‚âà $0',
                    reply_markup=ReplyKeyboardMarkup([
                        [{'text': 'üè† –ì–ª–∞–≤–Ω–∞—è'}]
                    ], resize_keyboard=True)
                )
        except Exception as e:
            logger.error(f"Error fetching Bybit balance: {e}")
            await update.message.reply_text(
                'üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n'
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Bybit\n\n'
                '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ‚âà $0',
                reply_markup=ReplyKeyboardMarkup([
                    [{'text': 'üè† –ì–ª–∞–≤–Ω–∞—è'}]
                ], resize_keyboard=True)
            )
        
    elif selection == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        # Settings menu
        keyboard = [
            [{'text': 'üîë –í–≤–µ—Å—Ç–∏ API –∫–ª—é—á–∏'}],
            [{'text': 'üè† –ì–ª–∞–≤–Ω–∞—è'}]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        api_info = ""
        if user_data.get(user_id, {}).get('bybit_api_key'):
            api_info = f"\nAPI Key: {user_data[user_id]['bybit_api_key'][:5]}...{user_data[user_id]['bybit_api_key'][-5:]}"
        
        await update.message.reply_text(
            f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bybit:{api_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=reply_markup
        )

# Handle enter API keys
async def handle_enter_api_keys(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    
    user_states[user_id] = 'WAITING_API_KEY'
    save_user_states(user_states)
    
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á Bybit:',
        reply_markup=reply_markup
    )

# Handle enter API keys callback
async def handle_enter_api_keys_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(query.from_user.id)
    user_states = load_user_states()
    
    user_states[user_id] = 'WAITING_API_KEY'
    save_user_states(user_states)
    
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á Bybit:',
        reply_markup=reply_markup
    )

# Handle API key input
async def handle_api_key_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or user_states[user_id] != 'WAITING_API_KEY':
        return
        
    # Save API key
    if user_id not in user_data:
        user_data[user_id] = {}
    if 'bybit_api_key' not in user_data[user_id]:
        user_data[user_id]['bybit_api_key'] = ''
        
    user_data[user_id]['bybit_api_key'] = update.message.text
    save_user_data(user_data)
    
    del user_states[user_id]
    save_user_states(user_states)
    
    # After saving API key, ask for API secret and stay in settings
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API Secret:',
        reply_markup=reply_markup
    )
    
    # Set state to wait for secret
    user_states[user_id] = 'WAITING_API_SECRET'
    save_user_states(user_states)

# Handle API secret input
async def handle_api_secret_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or user_states[user_id] != 'WAITING_API_SECRET':
        return
        
    # Save API secret
    if user_id not in user_data:
        user_data[user_id] = {}
    if 'bybit_api_secret' not in user_data[user_id]:
        user_data[user_id]['bybit_api_secret'] = ''
        
    user_data[user_id]['bybit_api_secret'] = update.message.text
    save_user_data(user_data)
    
    del user_states[user_id]
    save_user_states(user_states)
    
    # After saving API keys, show crypto menu
    keyboard = [
        [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='crypto_stats'), InlineKeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='crypto_balance')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='crypto_settings'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '‚úÖ API Secret —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Bybit –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.',
        reply_markup=reply_markup
    )

# Piggy bank section
async def handle_piggy_bank_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    keyboard = [
        [InlineKeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–ª–∫—É', callback_data='create_piggy_bank')]
    ]
    
    # Add existing piggy banks
    if user_id in user_data and user_data[user_id]['piggy_banks']:
        for name in user_data[user_id]['piggy_banks']:
            keyboard.append([InlineKeyboardButton(f'üí∞ {name}', callback_data=f'piggy_bank_{name}')])
    
    keyboard.append([InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if not user_data.get(user_id, {}).get('piggy_banks'):
        await update.message.reply_text(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞:\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–ø–∏–ª–∫—É!', reply_markup=reply_markup)
    else:
        await update.message.reply_text(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞:', reply_markup=reply_markup)

# Piggy bank section callback
async def handle_piggy_bank_menu_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    keyboard = [
        [InlineKeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–ª–∫—É', callback_data='create_piggy_bank')]
    ]
    
    # Add existing piggy banks
    if user_id in user_data and user_data[user_id]['piggy_banks']:
        for name in user_data[user_id]['piggy_banks']:
            keyboard.append([InlineKeyboardButton(f'üí∞ {name}', callback_data=f'piggy_bank_{name}')])
    
    keyboard.append([InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if not user_data.get(user_id, {}).get('piggy_banks'):
        await query.edit_message_text(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞:\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–ø–∏–ª–∫—É!', reply_markup=reply_markup)
    else:
        await query.edit_message_text(' –ú–æ—Å –ö–æ–ø–∏–ª–∫–∞:', reply_markup=reply_markup)

# Handle piggy bank actions
async def handle_piggy_bank_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, piggy_name: str) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or piggy_name not in user_data[user_id]['piggy_banks']:
        await update.message.reply_text('–ö–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=main_menu())
        return
    
    piggy = user_data[user_id]['piggy_banks'][piggy_name]
    current = piggy['current']
    target = piggy['target']
    percentage = round((current / target) * 100, 1) if target > 0 else 0
    
    keyboard = [
        [InlineKeyboardButton('üí∞ –ü–æ–ª–æ–∂–∏—Ç—å', callback_data=f'deposit_{piggy_name}'), InlineKeyboardButton('üí∏ –°–Ω—è—Ç—å', callback_data=f'withdraw_{piggy_name}')],
        [InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'edit_{piggy_name}'), InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{piggy_name}')],
        [InlineKeyboardButton(' Bakan—ã', callback_data='piggy_bank_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]  # Use consistent text
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'üí∞ –ö–æ–ø–∏–ª–∫–∞: {piggy_name}\n'
        f'–¶–µ–ª—å: {target} —Ä—É–±.\n'
        f'–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {current} —Ä—É–±. ({percentage}%)\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    
    # Save current piggy bank name in state
    user_states = load_user_states()
    user_states[user_id] = f'CURRENT_PIGGY_{piggy_name}'
    save_user_states(user_states)

# Handle piggy bank actions callback
async def handle_piggy_bank_actions_callback(query, context: ContextTypes.DEFAULT_TYPE, piggy_name: str) -> None:
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or piggy_name not in user_data[user_id]['piggy_banks']:
        await query.edit_message_text('–ö–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=main_menu())
        return
    
    piggy = user_data[user_id]['piggy_banks'][piggy_name]
    current = piggy['current']
    target = piggy['target']
    percentage = round((current / target) * 100, 1) if target > 0 else 0
    
    keyboard = [
        [InlineKeyboardButton('üí∞ –ü–æ–ª–æ–∂–∏—Ç—å', callback_data=f'deposit_{piggy_name}'), InlineKeyboardButton('üí∏ –°–Ω—è—Ç—å', callback_data=f'withdraw_{piggy_name}')],
        [InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'edit_{piggy_name}'), InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{piggy_name}')],
        [InlineKeyboardButton(' Bakan—ã', callback_data='piggy_bank_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]  # Use consistent text
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f'üí∞ –ö–æ–ø–∏–ª–∫–∞: {piggy_name}\n'
        f'–¶–µ–ª—å: {target} —Ä—É–±.\n'
        f'–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {current} —Ä—É–±. ({percentage}%)\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    
    # Save current piggy bank name in state
    user_states = load_user_states()
    user_states[user_id] = f'CURRENT_PIGGY_{piggy_name}'
    save_user_states(user_states)

# Handle create piggy bank
async def handle_create_piggy_bank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    
    user_states[user_id] = 'CREATING_PIGGY_NAME'
    save_user_states(user_states)
    
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ø–∏–ª–∫–∏:',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ])
    )

# Handle create piggy bank callback
async def handle_create_piggy_bank_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(query.from_user.id)
    user_states = load_user_states()
    
    user_states[user_id] = 'CREATING_PIGGY_NAME'
    save_user_states(user_states)
    
    await query.edit_message_text(
        'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ø–∏–ª–∫–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–û—Ç–ø—É—Å–∫", "–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", "–†–µ–º–æ–Ω—Ç"',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ])
    )

# Handle piggy bank name input
async def handle_piggy_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or user_states[user_id] != 'CREATING_PIGGY_NAME':
        return
    
    piggy_name = update.message.text
    
    # Save the name and ask for target amount
    user_states[user_id] = f'CREATING_PIGGY_TARGET_{piggy_name}'
    save_user_states(user_states)
    
    await update.message.reply_text('üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É –¥–ª—è –∫–æ–ø–∏–ª–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 10000')

# Handle piggy bank target input
async def handle_piggy_target_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or not user_states[user_id].startswith('CREATING_PIGGY_TARGET_'):
        return
    
    try:
        target_amount = float(update.message.text)
        piggy_name = user_states[user_id].replace('CREATING_PIGGY_TARGET_', '')
        
        # Create piggy bank
        if user_id not in user_data:
            user_data[user_id] = {'piggy_banks': {}}
        if 'piggy_banks' not in user_data[user_id]:
            user_data[user_id]['piggy_banks'] = {}
            
        user_data[user_id]['piggy_banks'][piggy_name] = {
            'current': 0,
            'target': target_amount
        }
        save_user_data(user_data)
        
        del user_states[user_id]
        save_user_states(user_states)
        
        keyboard = [
            [InlineKeyboardButton(' Bakan—ã', callback_data='piggy_bank_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f'‚úÖ –ö–æ–ø–∏–ª–∫–∞ "{piggy_name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {target_amount} —Ä—É–±.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–ø–∏–ª–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É.',
            reply_markup=reply_markup
        )
    except ValueError:
        update.message.reply_text('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):')

# Handle deposit to piggy bank
def handle_deposit_to_piggy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    # Get current piggy bank from state
    if user_id not in user_states or not user_states[user_id].startswith('CURRENT_PIGGY_'):
        update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_states[user_id].replace('CURRENT_PIGGY_', '')
    
    if piggy_name not in user_data.get(user_id, {}).get('piggy_banks', {}):
        update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    user_states[user_id] = f'DEPOSITING_{piggy_name}'
    save_user_states(user_states)
    
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
        reply_markup=reply_markup
    )

# Handle shopping list menu
async def handle_shopping_list_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton('üçé –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data='category_–ü—Ä–æ–¥—É–∫—Ç—ã'), InlineKeyboardButton('Êù®Ê¨¢–∫–∞', callback_data='category_–ê–ø—Ç–µ–∫–∞'), InlineKeyboardButton('üì¶ –û—Å—Ç–∞–ª—å–Ω–æ–µ', callback_data='category_–û—Å—Ç–∞–ª—å–Ω–æ–µ')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)

# Handle shopping list menu callback
async def handle_shopping_list_menu_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton('üçé –ü—Ä–æ–¥—É–∫—Ç—ã', callback_data='category_–ü—Ä–æ–¥—É–∫—Ç—ã'), InlineKeyboardButton('Êù®Ê¨¢–∫–∞', callback_data='category_–ê–ø—Ç–µ–∫–∞'), InlineKeyboardButton('üì¶ –û—Å—Ç–∞–ª—å–Ω–æ–µ', callback_data='category_–û—Å—Ç–∞–ª—å–Ω–æ–µ')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:', reply_markup=reply_markup)

# Handle shopping category
async def handle_shopping_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    # Get items for this category (remove emoji if present)
    clean_category = category[2:] if category.startswith(('üçé', 'Êù®Ê¨¢–∫–∞', 'üì¶')) else category
    items = user_data.get(user_id, {}).get('shopping_list', {}).get(clean_category, [])
    
    # Create keyboard with items and action buttons
    keyboard = []
    
    # Add items
    for item in items:
        keyboard.append([InlineKeyboardButton(f'‚ùå {item}', callback_data=f'delete_item_{clean_category}_{item}')])
    
    # Add action buttons
    keyboard.append([InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'add_item_{clean_category}'), InlineKeyboardButton('üóë –û—á–∏—Å—Ç–∏—Ç—å', callback_data=f'clear_category_{clean_category}')])
    keyboard.append([InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')])  # Use consistent text
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if items:
        items_text = '\n'.join([f'‚Ä¢ {item}' for item in items])
        message = f'{clean_category}:\n{items_text}'
    else:
        message = f'{clean_category}:\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç!'
    
    await update.message.reply_text(
        f'üìã {message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    
    # Save state for adding items
    user_states = load_user_states()
    user_states[user_id] = f'ADDING_ITEM_{clean_category}'
    save_user_states(user_states)

# Handle shopping category callback
async def handle_shopping_category_callback(query, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    # Get items for this category (remove emoji if present)
    clean_category = category[2:] if category.startswith(('üçé', 'Êù®Ê¨¢–∫–∞', 'üì¶')) else category
    items = user_data.get(user_id, {}).get('shopping_list', {}).get(clean_category, [])
    
    # Create keyboard with items and action buttons
    keyboard = []
    
    # Add items
    for item in items:
        keyboard.append([InlineKeyboardButton(f'‚ùå {item}', callback_data=f'delete_item_{clean_category}_{item}')])
    
    # Add action buttons
    keyboard.append([InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'add_item_{clean_category}'), InlineKeyboardButton('üóë –û—á–∏—Å—Ç–∏—Ç—å', callback_data=f'clear_category_{clean_category}')])
    keyboard.append([InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')])  # Use consistent text
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if items:
        items_text = '\n'.join([f'‚Ä¢ {item}' for item in items])
        message = f'{clean_category}:\n{items_text}'
    else:
        message = f'{clean_category}:\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç!'
    
    await query.edit_message_text(
        f'üìã {message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )
    
    # Save state for adding items
    user_states = load_user_states()
    user_states[user_id] = f'ADDING_ITEM_{clean_category}'
    save_user_states(user_states)

# Handle adding item to shopping list
async def handle_add_shopping_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or not user_states[user_id].startswith('ADDING_ITEM_'):
        return
    
    clean_category = user_states[user_id].replace('ADDING_ITEM_', '')
    item = update.message.text
    
    if user_id not in user_data:
        user_data[user_id] = {'shopping_list': {}}
    if 'shopping_list' not in user_data[user_id]:
        user_data[user_id]['shopping_list'] = {}
    if clean_category not in user_data[user_id]['shopping_list']:
        user_data[user_id]['shopping_list'][clean_category] = []
    
    user_data[user_id]['shopping_list'][clean_category].append(item)
    save_user_data(user_data)
    
    del user_states[user_id]
    save_user_states(user_states)
    
    # Send confirmation message
    keyboard = [
        [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'‚úÖ –¢–æ–≤–∞—Ä "{item}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{clean_category}"!\n\n'
        f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.',
        reply_markup=reply_markup
    )

# Handle delete shopping item
def handle_delete_shopping_item(update: Update, context: ContextTypes.DEFAULT_TYPE, item_to_delete: str) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    for category, items in user_data.get(user_id, {}).get('shopping_list', {}).items():
        if item_to_delete in items:
            items.remove(item_to_delete)
            save_user_data(user_data)
            
            # Send confirmation message
            keyboard = [
                [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                f'‚úÖ –¢–æ–≤–∞—Ä "{item_to_delete}" —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"!\n\n'
                f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫.',
                reply_markup=reply_markup
            )
            return
    
    update.message.reply_text('‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=main_menu())

# Handle clear shopping category
def handle_clear_shopping_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or not user_states[user_id].startswith('ADDING_ITEM_'):
        return
    
    clean_category = user_states[user_id].replace('ADDING_ITEM_', '')
    user_data[user_id]['shopping_list'][clean_category] = []
    save_user_data(user_data)
    
    del user_states[user_id]
    save_user_states(user_states)
    
    # Send confirmation message
    keyboard = [
        [InlineKeyboardButton('üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data='shopping_list_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f'‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "{clean_category}" –æ—á–∏—â–µ–Ω–∞!\n\n'
        f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.',
        reply_markup=reply_markup
    )

# Handle deposit to piggy bank
async def handle_deposit_to_piggy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    # Get current piggy bank from state
    if user_id not in user_states or not user_states[user_id].startswith('CURRENT_PIGGY_'):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_states[user_id].replace('CURRENT_PIGGY_', '')
    
    if piggy_name not in user_data.get(user_id, {}).get('piggy_banks', {}):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    user_states[user_id] = f'DEPOSITING_{piggy_name}'
    save_user_states(user_states)
    
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
        reply_markup=reply_markup
    )

# Handle withdraw from piggy bank
async def handle_withdraw_from_piggy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    # Get current piggy bank from state
    if user_id not in user_states or not user_states[user_id].startswith('CURRENT_PIGGY_'):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_states[user_id].replace('CURRENT_PIGGY_', '')
    
    if piggy_name not in user_data.get(user_id, {}).get('piggy_banks', {}):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    user_states[user_id] = f'WITHDRAWING_{piggy_name}'
    save_user_states(user_states)
    
    keyboard = [
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–∑ –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
        reply_markup=reply_markup
    )

# Handle amount input
async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states:
        return
    
    try:
        amount = float(update.message.text)
        piggy_name = user_states[user_id].split('_')[1]
        
        if user_states[user_id].startswith('DEPOSITING_'):
            user_data[user_id]['piggy_banks'][piggy_name]['current'] += amount
        elif user_states[user_id].startswith('WITHDRAWING_'):
            user_data[user_id]['piggy_banks'][piggy_name]['current'] -= amount
        
        save_user_data(user_data)
        del user_states[user_id]
        save_user_states(user_states)
        
        await handle_piggy_bank_actions(update, context, piggy_name)
    except ValueError:
        await update.message.reply_text('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):')

# Handle edit piggy bank
async def handle_edit_piggy_bank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    if user_id not in user_states or not user_states[user_id].startswith('CURRENT_PIGGY_'):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_states[user_id].replace('CURRENT_PIGGY_', '')
    
    if piggy_name not in user_data.get(user_id, {}).get('piggy_banks', {}):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    keyboard = [
        [InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'edit_name_{piggy_name}'), InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data=f'edit_target_{piggy_name}')],
        [InlineKeyboardButton(' Bakan—ã', callback_data='piggy_bank_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

# Handle edit piggy bank name
async def handle_edit_piggy_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    if user_id not in user_states or not user_states[user_id].startswith('CURRENT_PIGGY_'):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_states[user_id].replace('CURRENT_PIGGY_', '')
    
    if piggy_name not in user_data.get(user_id, {}).get('piggy_banks', {}):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    user_states[user_id] = f'EDITING_PIGGY_NAME_{piggy_name}'
    save_user_states(user_states)
    
    await update.message.reply_text(
        f'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ])
    )

# Handle edit piggy bank name input
async def handle_edit_piggy_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or not user_states[user_id].startswith('EDITING_PIGGY_NAME_'):
        return
    
    new_name = update.message.text
    old_name = user_states[user_id].replace('EDITING_PIGGY_NAME_', '')
    
    if user_id not in user_data or old_name not in user_data[user_id]['piggy_banks']:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    user_data[user_id]['piggy_banks'][new_name] = user_data[user_id]['piggy_banks'].pop(old_name)
    save_user_data(user_data)
    
    del user_states[user_id]
    save_user_states(user_states)
    
    await handle_piggy_bank_actions(update, context, new_name)

# Handle edit piggy bank target
async def handle_edit_piggy_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_states = load_user_states()
    user_data = load_user_data()
    
    if user_id not in user_states or not user_states[user_id].startswith('CURRENT_PIGGY_'):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_states[user_id].replace('CURRENT_PIGGY_', '')
    
    if piggy_name not in user_data.get(user_id, {}).get('piggy_banks', {}):
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    user_states[user_id] = f'EDITING_PIGGY_TARGET_{piggy_name}'
    save_user_states(user_states)
    
    await update.message.reply_text(
        f'üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É –¥–ª—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
        ])
    )

# Handle edit piggy bank target input
async def handle_edit_piggy_target_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    user_states = load_user_states()
    
    if user_id not in user_states or not user_states[user_id].startswith('EDITING_PIGGY_TARGET_'):
        return
    
    try:
        new_target = float(update.message.text)
        piggy_name = user_states[user_id].replace('EDITING_PIGGY_TARGET_', '')
        
        if user_id not in user_data or piggy_name not in user_data[user_id]['piggy_banks']:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return
        
        user_data[user_id]['piggy_banks'][piggy_name]['target'] = new_target
        save_user_data(user_data)
        
        del user_states[user_id]
        save_user_states(user_states)
        
        await handle_piggy_bank_actions(update, context, piggy_name)
    except ValueError:
        await update.message.reply_text('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ):')

# Handle delete piggy bank
async def handle_delete_piggy_bank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ø–∏–ª–∫–∞')
        return
    
    piggy_name = user_data[user_id]['piggy_banks'].keys()
    
    if not piggy_name:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
    
    del user_data[user_id]['piggy_banks']
    save_user_data(user_data)
    
    await update.message.reply_text('‚úÖ –ö–æ–ø–∏–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=main_menu())

# Handle callback queries for inline keyboards
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = str(update.effective_user.id)
        
        logger.info(f"User {user_id} clicked button with callback_data: {data}")
        
        # Handle different callback data
        if data == 'main_menu':
            await show_main_menu_callback(query, context)
        elif data == 'crypto_menu':
            await handle_crypto_menu_callback(query, context)
        elif data == 'piggy_bank_menu':
            await handle_piggy_bank_menu_callback(query, context)
        elif data == 'shopping_list_menu':
            await handle_shopping_list_menu_callback(query, context)
        elif data == 'settings_menu':
            await handle_settings_menu_callback(query, context)
        elif data == 'help_menu':
            await handle_help_menu_callback(query, context)
        elif data.startswith('piggy_bank_'):
            piggy_name = data.replace('piggy_bank_', '')
            await handle_piggy_bank_actions_callback(query, context, piggy_name)
        elif data.startswith('category_'):
            category = data.replace('category_', '')
            await handle_shopping_category_callback(query, context, category)
        elif data == 'create_piggy_bank':
            await handle_create_piggy_bank_callback(query, context)
        elif data == 'enter_api_keys':
            await handle_enter_api_keys_callback(query, context)
        elif data.startswith('deposit_'):
            piggy_name = data.replace('deposit_', '')
            # Handle deposit logic
            user_states = load_user_states()
            user_states[user_id] = f'DEPOSITING_{piggy_name}'
            save_user_states(user_states)
                
            keyboard = [
                [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
                
            await query.edit_message_text(
                f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
                reply_markup=reply_markup
            )
        elif data.startswith('withdraw_'):
            piggy_name = data.replace('withdraw_', '')
            # Handle withdraw logic
            user_states = load_user_states()
            user_states[user_id] = f'WITHDRAWING_{piggy_name}'
            save_user_states(user_states)
                
            keyboard = [
                [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
                
            await query.edit_message_text(
                f'üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–∑ –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
                reply_markup=reply_markup
            )
        elif data.startswith('edit_name_'):
            piggy_name = data.replace('edit_name_', '')
            # Handle edit name logic
            user_states = load_user_states()
            user_states[user_id] = f'EDITING_PIGGY_NAME_{piggy_name}'
            save_user_states(user_states)
                
            keyboard = [
                [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
                
            await query.edit_message_text(
                f'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
                reply_markup=reply_markup
            )
        elif data.startswith('edit_target_'):
            piggy_name = data.replace('edit_target_', '')
            # Handle edit target logic
            user_states = load_user_states()
            user_states[user_id] = f'EDITING_PIGGY_TARGET_{piggy_name}'
            save_user_states(user_states)
                
            keyboard = [
                [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
                
            await query.edit_message_text(
                f'üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É –¥–ª—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
                reply_markup=reply_markup
            )
        elif data.startswith('edit_'):
            piggy_name = data.replace('edit_', '')
            # Handle edit logic
            user_states = load_user_states()
            user_states[user_id] = f'EDITING_PIGGY_NAME_{piggy_name}'
            save_user_states(user_states)
                
            keyboard = [
                [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
                
            await query.edit_message_text(
                f'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏–ª–∫–∏ "{piggy_name}":',
                reply_markup=reply_markup
            )
        elif data.startswith('delete_'):
            piggy_name = data.replace('delete_', '')
            # Handle delete logic
            user_data = load_user_data()
            if piggy_name in user_data.get(user_id, {}).get('piggy_banks', {}):
                del user_data[user_id]['piggy_banks'][piggy_name]
                save_user_data(user_data)
                    
                keyboard = [
                    [InlineKeyboardButton(' Bakan—ã', callback_data='piggy_bank_menu'), InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                    
                await query.edit_message_text(
                    f'‚úÖ –ö–æ–ø–∏–ª–∫–∞ "{piggy_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ø–∏–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        elif data.startswith('add_item_'):
            category = data.replace('add_item_', '')
            # Handle add item logic
            user_states = load_user_states()
            user_states[user_id] = f'ADDING_ITEM_{category}'
            save_user_states(user_states)
                
            keyboard = [
                [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–∞—è', callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
                
            await query.edit_message_text(
                f'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":\n\n'
                f'–ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ–ª–æ–∫–æ", "–•–ª–µ–±", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞"',
                reply_markup=reply_markup
            )
        elif data.startswith('clear_category_'):
            category = data.replace('clear_category_', '')
            # Handle clear category logic
            user_data = load_user_data()
            if category in user_data.get(user_id, {}).get('shopping_list', {}):
                user_data[user_id]['shopping_list'][category] = []
                save_user_data(user_data)
                    
                # Show updated category
                await handle_shopping_category_callback(query, context, category)
        elif data.startswith('delete_item_'):
            # Handle delete item logic
            parts = data.split('_', 3)
            if len(parts) >= 4:
                category = parts[2]
                item_name = parts[3]
                # Remove item from category
                user_data = load_user_data()
                if category in user_data.get(user_id, {}).get('shopping_list', {}):
                    if item_name in user_data[user_id]['shopping_list'][category]:
                        user_data[user_id]['shopping_list'][category].remove(item_name)
                        save_user_data(user_data)
                            
                        # Show updated category
                        await handle_shopping_category_callback(query, context, category)
                    else:
                        await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
                else:
                    await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            else:
                await query.edit_message_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        else:
            logger.warning(f"Unknown callback_data: {data}")
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error handling callback query: {e}")
        try:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

def main():
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # Run the bot until the user presses Ctrl-C
    logger.info("Starting bot...")
    application.run_polling()
    logger.info("Bot started successfully!")

if __name__ == "__main__":
    main()
